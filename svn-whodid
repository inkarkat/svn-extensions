#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show log sorted by name and their commits. 
--no-merge	Exclude any commits that mention merge in the revision summary. 
Note: svn log option -v is not supported here, but also doesn't make sense here. 
Usage: "$(basename "$1")" [--no-merge] [-c M | -r N[:M]] [-l|--limit ARG] [PATH...] [-?|-h|--help]
HELPTEXT
}

: ${COLOR_HEADER:='[34m'}
: ${COLOR_REVISION:='[36m'}
: ${COLOR_RESET:='[0m'}
colorize()
{
    sed -e '/^[^ ].*:$/'"s/.*/${COLOR_HEADER}\\0${COLOR_RESET}/" \
	-e 's/\(^      \)\(r[0-9]\+\)\(:.*\)/'"\\1${COLOR_REVISION}\\2${COLOR_RESET}\\3/"
}

typeset filter=cat
typeset -a allargs=()
while [ $# -gt 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-merge)	shift; filter='grep -iv merg\(e\|ed\|es\|ing\)\b';;
	*)
	    allargs+=("$1")
	    shift
	    ;;
    esac
done

svn log "${allargs[@]}" | sed -ne '
/^r[0-9]\+/{
    s/\(^r[0-9]\+\) *| *\([^ |]\+\) *| *[^ |]\+[^|]*|.*/\2 | \1 | /
    N
    N
    s/\n//g
    p
}
' | $filter | awk '
BEGIN {
    FS = " \\| "
}
{
    if (NF == 0)
	next

    commitCount[$1]++
    if (highestRev[$1] == "")
	highestRev[$1] = $2
    commits[$1] = commits[$1] "\n      " $2 ": " substr($0, index($0, $2) + 3 + length($2))
}
END {
    # The hash from author to commit count must be reverted, so that we can sort
    # by index. Since that is not a one-to-one mapping, we add the highest
    # revision number to the key to make it unique. This also makes the
    # (reverse-sorted) output print the author with the highest revision number
    # first when multiple authors have the same commit count. 
    for (i in commitCount) {
	flipped[sprintf("%04d %s", commitCount[i], highestRev[i])] = i
    }

    n = asorti(flipped, dest)
    for (j = n; j > 0; j--) {
	author = flipped[dest[j]]
	print author " (" commitCount[author] "):" commits[author]
    }
}
' | colorize | less --RAW-CONTROL-CHARS
