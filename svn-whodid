#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show log grouped by name and sorted by the number of their commits.
--no-merge	Exclude any commits that mention merge in the revision summary.
--no-color	Turn off color highlighting.
-s|--summary	Show author names sorted by the number of their commits only.
(*) denotes the first commit
Note: svn log option -v is not supported here, but also doesn't make sense here.
Usage: "$(basename "$1")" [--no-merge] [-s|--summary] [-c M | -r N[:M]] [-l|--limit ARG] [--no-color] [PATH [PATH ...]] [-?|-h|--help]
HELPTEXT
}

: ${SVN_MERGE_COMMENT_PATTERN:=merg\\(e\\|ed\\|es\\|ing\\|eback\\)\\b}
: ${COLOR_HEADER:='[34m'}
: ${COLOR_REVISION:='[36m'}
: ${COLOR_RESET:='[0m'}
colorize()
{
    if [ "$isNoColor" ]; then
	cat
    else
	sed --unbuffered \
	    -e '/^[^ ].*:$/'"s/.*/${COLOR_HEADER}\\0${COLOR_RESET}/" \
	    -e 's/\(^      \)\(r[0-9]\+\)\(:.*\)/'"\\1${COLOR_REVISION}\\2${COLOR_RESET}\\3/"
    fi
}

typeset filter=cat
typeset isSummary=
typeset isNoColor=
typeset -a allargs=()
while [ $# -gt 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-merge)	shift; filter="grep --line-buffered -iv \"\${SVN_MERGE_COMMENT_PATTERN}\"";;
	--no-color)	shift; isNoColor='true';;
	--summary|-s)	shift; isSummary='true';;
	*)
	    allargs+=("$1")
	    shift
	    ;;
    esac
done
typeset -a files=()
while [ ${#allargs[@]} -gt 0 ] && [ -e "${allargs[-1]}" ]
do
    files+=("${allargs[-1]}")
    unset allargs[-1]
done
if [ ${#files[@]} -gt 1 ]; then
    # Strip off duplicate commits that cover multiple files; for the AWK
    # reporting, it's important that the list remains sorted descending by
    # revision number.
    filter="$filter | sort -t '|' -k 2 -r -u"
fi

set -o pipefail
for file in "${files[@]}"
do
    svn log --non-interactive "${allargs[@]}" "$file"
done | sed --unbuffered -ne '
/^r[0-9]\+/{
    s/\(^r[0-9]\+\) *| *\([^ |]\+\) *| *[^ |]\+[^|]*|.*/\2 | \1 | /
    N
    N
    s/\n//g
    p
}
' | eval "$filter" | awk -v isSummary=$isSummary '
BEGIN {
    FS = " \\| "
}
{
    if (NF == 0)
	next

    commitCount[$1]++
    if (highestRev[$1] == "")
	highestRev[$1] = $2
    commits[$1] = commits[$1] "\n      " $2 ": " substr($0, index($0, $2) + 3 + length($2))
    firstAuthor=$1
}
END {
    # The hash from author to commit count must be reverted, so that we can sort
    # by index. Since that is not a one-to-one mapping, we add the highest
    # revision number to the key to make it unique. This also makes the
    # (reverse-sorted) output print the author with the highest revision number
    # first when multiple authors have the same commit count.
    for (i in commitCount) {
	flipped[sprintf("%04d %s", commitCount[i], highestRev[i])] = i
    }

    n = asorti(flipped, dest)
    for (j = n; j > 0; j--) {
	author = flipped[dest[j]]
	firstCommitIndicator = (firstAuthor == author ? " (*)" : "")
	if (isSummary == "")
	    print author " (" commitCount[author] "):" commits[author] firstCommitIndicator
	else
	    printf "%6s  %s\n", commitCount[author], author firstCommitIndicator
    }
}
' | colorize | "${PAGER:-less}" --quit-on-intr --RAW-CONTROL-CHARS
