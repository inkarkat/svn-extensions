#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Find merge candidates in SOURCE that still need merging into the working copy,
and merge them back.
If the merge aborts with a conflict in between, just re-execute the same command
with the --continue argument added; this avoids that the original commit message
template (for all merged revisions) gets overwritten.
Usage: "$(basename "$1")" [--continue] [-v|--verbose] [--grep REGEXP [--grep ...]] [-i|--regexp-ignore-case] [-E|--extended-regexp|-F|--fixed-strings] [--author REGEXP] [-c M | -r N[:M]] [-l|--limit ARG] SOURCE[@REV] [-?|-h|--help]
HELPTEXT
}

typeset -a allargs=()
typeset -a logargs=()
typeset -a mergeargs=()
typeset -a candidateRevisions=()
isRevisionGiven=
isContinue=
action='Merge'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--continue)	shift; isContinue=t;;
	--change|-c)	shift; candidateRevisions+=("r${1#r}"); shift; isRevisionGiven=t;;
	--revision|-r)	shift; candidateRevisions+=("r${1#r}"); shift; isRevisionGiven=t;;
	--record-only)
			action='Record merge of'
			mergeargs+=("$1"); shift;;
	--dry-run|--ignore-ancestry|--allow-mixed-revisions)
			mergeargs+=("$1"); shift;;
	--accept)	mergeargs+=("$1" "$2"); shift; shift;;
	--verbose|-v|--regexp-ignore-case|-i|--extended-regexp|-E|--fixed-strings|-F)
			logargs+=("$1"); shift;;
	--grep|--author|--limit|-l)
			logargs+=("$1" "$2"); shift; shift;;
	--)		shift; break;;
	*)		if [ $# -gt 1 ]; then
			    allargs+=("$1")
			    shift
			else
			    break
			fi
			;;
    esac
done
source=$1
[ $# -eq 0 -o ! "$source" ] && { printUsage "$0"; exit 2; }

IFS=$'\n'

if [ "$isRevisionGiven" ]; then
    printf >&2 'Considering passed %d revision(s).\n' "${#candidateRevisions[@]}"
else
    typeset -a candidateRevisions=($(svn mergeinfo --non-interactive --show-revs eligible "$source"))
    if [ ${#candidateRevisions[@]} -eq 0 ]; then
	echo >&2 "No merge candidates found"
	exit 1
    fi

    printf >&2 'Considering %d revision(s).\n' "${#candidateRevisions[@]}"
fi


typeset -a mergeRevisions=($(svn-log --format revisionsonly "${allargs[@]}" "${logargs[@]}" ${candidateRevisions[*]/r/-c } "$source"))
if [ ${#mergeRevisions[@]} -le 0 ]; then
    echo >&2 "No revisions to merge."
    exit 1
fi


svn-wrapper merge --non-interactive ${mergeRevisions[*]/r/-c } "${allargs[@]}" "${mergeargs[@]}" "$source"
status=$?   # Continue with building the commit message template; we might still want to commit after resolving any conflicts.

commitMessage=svn-commit.tmp
if [ "$isContinue" -a -e "$commitMessage" ]; then
    # The commit message template has already been created; do not override it
    # with the now reduced number of still outstanding merge revisions.
    exit $status
fi

relativeSource=$(svn info --non-interactive "$source" | sed -ne 's/^Relative URL: //p') || relativeSource=$source
if [ ${#mergeRevisions[@]} -eq 1 ]; then
    printf '%s %s from %s: ' "$action" "${mergeRevisions[0]}" "$relativeSource"
    eval 'svn-log --format noheader "${allargs[@]}" "${logargs[@]}"' ${mergeRevisions[*]/r/-c } '"$source"'
else
    IFS=','
    mergeRevisionsList="${mergeRevisions[*]/r/ r}"
    printf '%s revisions %s from %s\n\n' "$action" "${mergeRevisionsList# }" "$relativeSource"
    eval 'svn-log --format merge "${allargs[@]}" "${logargs[@]}"' ${mergeRevisions[*]/r/-c } '"$source"'
fi > "$commitMessage"

exit $status
