#!/bin/bash

# Enable extended file pattern matching operators from ksh
# (?(pattern-list), !(pattern-list), ...) in Bash.
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Filter to grey out / ... files outside PATH / the CWD from the svn verbose log
and to transform diffs and property changes outside PATH to one-line summaries.
Unless -e is given, PATH is taken literally (no regular expression) and must
match whole path fragments from the beginning.
With -e, all PATHs are interpreted as unanchored regular expressions.
With --non-recursive, PATH must match exactly; i.e. files below PATH are
filtered.
--no-color	Turn off coloring.
Usage: svn lc ... | "$(basename "$1")" [--non-recursive] [--no-color] [-e] [PATH...] [-?|-h|--help]
HELPTEXT
}

: ${COLOR_OMITTED:='[37m'}
: ${COLOR_RESET:='[0m'}
isColor=t
isNonRecursive=
endSeparator=/
typeset -a pathGrepArgs=(-F)
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--non-recursive)    shift; isNonRecursive=t; endSeparator=///;;
	--no-color)	shift; isColor=
			# And clear all colors used here.
			for color in ${!COLOR_@}; do
			    unset $color
			done
			;;
	-e)		shift; pathGrepArgs=(); endSeparator=;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

[ $# -eq 0 ] && set -- "$(svn-pathname)"

for path
do
    # Transform into local repository path first.
    if [ "$path" = '.' ]; then
	path=$(svn-pathname)
    fi

    if [ "$path" = '.' ]; then
	if [ ! "$isNonRecursive" ]; then
	    # When we're at the top of the local repository, that means nothing gets
	    # filtered.
	    pathGrepArgs=(-e '.*')
	else
	    # Except when --non-recursive has been specified. Then, the
	    # repository-local file path is ".", and the log path is the branch
	    # name. We add both as alternatives instead of defining two
	    # variables.
	    pathGrepArgs=(-F -e ".${endSeparator}" -e "$(svn-branchname)${endSeparator}")
	fi
	break
    else
	pathGrepArgs+=(-e "${path%${endSeparator}}${endSeparator}")
    fi
done


uncolor()
{
    eval "$1=\"\${2//\\[+([0-9;])[mK]/}\""
}

processLog()
{
    [ "$1" ] || return
    local logline
    local uncoloredLogline
    while IFS=$'\n' read -r logline
    do
	uncolor uncoloredLogline "$logline"
	case "$uncoloredLogline" in
	    *( )+([ADMR])+( )/*)
		path=${uncoloredLogline#*( )+([ADMR])+( )/}
		path=${path% (from *)}
		if printf %s%s "$path" "$endSeparator" | grep --quiet "${pathGrepArgs[@]}"; then
		    printf '%s\n' "$logline"
		elif [ "$isColor" ]; then
		    printf '%s\n' "${COLOR_OMITTED}${uncoloredLogline}${COLOR_RESET}"
		else
		    printf '   ...\n'
		fi
		;;
	    *) printf '%s\n' "$logline";;
	esac
    done <<< "$1"
}

processContents()
{
    [ "$2" ] || return

    if printf %s%s "$1" "$endSeparator" | grep --quiet "${pathGrepArgs[@]}"; then
	printf '%s\n' "$2"
    else
	uncolor omitted "${2%%$'\n'*}
"
	printf '%s\n' "${COLOR_OMITTED}Omitted: ${omitted#Index: }${COLOR_RESET}"
    fi
}

process()
{
    if [ "$1" ]; then
	processContents "$@"
    else
	processLog "$2"
    fi
}

chunkify()
{
    local contents=
    local file=
    local line
    local uncoloredLine
    while IFS=$'\n' read -r line
    do
	uncolor uncoloredLine "$line"
	case "$uncoloredLine" in
	    revision\ *)
		process "$file" "$contents"

		contents=$line # Start anew.
		file=
		;;
	    Index:\ *)
		process "$file" "$contents"

		contents=$line # Start anew.
		file=${uncoloredLine#Index: }
		;;
	    Property\ changes\ on:\ *)
		if [ "$file" = "${uncoloredLine#Property changes on: }" ]; then
		    # Still belongs to the same file.
		    contents="$contents
$line"
		else
		    process "$file" "$contents"

		    contents=$line # Start anew.
		    file=${uncoloredLine#Property changes on: }
		fi
		;;
	    *)
		contents="${contents}${contents:+
}$line"
	    ;;
	esac
    done

    # Process the very last contents, too.
    process "$file" "$contents"
}

chunkify | less --quit-on-intr --RAW-CONTROL-CHARS
