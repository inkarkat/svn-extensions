#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
List the new path after file moves and renames and the corresponding revision.
--server	Instead of local history, only consider server revisions that
		you don't have yet.
Usage: "$(basename "$1")" [-r|--revision ARG] [-l|--limit ARG] [--server|PATH] [-?|-h|--help]
HELPTEXT
}

getRevisions()
{
    (eval "svn log --non-interactive --xml --with-no-revprops $revisionRangeArgs" '"${allargs[@]}"' || echo '<log></log>') | xmlstarlet sel --text -t -m '//logentry' -v '@revision' -n
    echo 'EOF'
}

getPath()
{
    repositoryUrl=$(svn info --non-interactive "$@" | sed -n -e 's/^URL: \(.*\)$/\1/p') || return $?
    printf %s "${repositoryUrl#"${repositoryRoot}"}"
}

printChangedPath()
{
    printf 'r%s\t%s\n' "$1" "$2"
}


revisionRangeArgs=
serverRevisionsArgs=
typeset -a allargs=()
while [ $# -gt 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	-c|--change)	revisionRangeArgs="${revisionRangeArgs}${revisionRangeArgs:+ }$1 '$2'"; shift; shift;;
	-r|--revision)	revisionRangeArgs="${revisionRangeArgs}${revisionRangeArgs:+ }$1 '$2'"; shift; shift;;
	-l|--limit)	revisionRangeArgs="${revisionRangeArgs}${revisionRangeArgs:+ }$1 '$2'"; shift; shift;;
	--server)	shift
			serverRevisionsArgs=$(svn-serverrevs)
			# Only add the revision filter for getRevisions() here,
			# the server repo URL must be passed to all svn
			# commands.
			revisionRangeArgs="${revisionRangeArgs}${revisionRangeArgs:+ }${serverRevisionsArgs% *}"
			;;
	*)
	    allargs+=("$1")
	    shift
	    ;;
    esac
done
if [ "$serverRevisionsArgs" ]; then
    # Only append the server repo URL here; the revision selection is done by the loop.
    allargs+=("${serverRevisionsArgs##* }")
fi

set -o pipefail
repositoryRoot=$(svn info --non-interactive "${allargs[@]}" | sed -n -e 's/^Repository Root: \(.*\)$/\1/p') || exit $?
previousRevision='working copy'
previousPath=$(getPath "${allargs[@]}") || exit $?
hasPathChanges=
getRevisions | while read revision
do
    if [ "$revision" = 'EOF' ]; then
	if [ "$hasPathChanges" ]; then
	    printChangedPath "$previousRevision" "$previousPath"
	fi
	break
    fi

    path=$(getPath --revision "$revision" "${allargs[@]}") || exit $?
    if [ "$path" != "$previousPath" ]; then
	hasPathChanges=t
	printChangedPath "$previousRevision" "$previousPath"
    fi

    previousRevision=$revision
    previousPath=$path
done | less --RAW-CONTROL-CHARS
