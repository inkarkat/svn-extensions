#!/bin/bash

shopt -qs extglob 2>/dev/null

printUsage()
{
    cat <<HELPTEXT
Detailed log messages.
-v		Include a list of changed files.
--grep REGEXP   Limit the commits to ones with log message that matches the
		specified pattern.
-i, --regexp-ignore-case
		Match the regexp limiting patterns without regard to letters case.
-E, --extended-regexp
		Consider the limiting patterns to be extended regular
		expressions instead of the default basic regular expressions.
-F, --fixed-strings
		Consider the limiting patterns to be fixed strings (don't
		interpret pattern as a regular expression).
--author REGEXP	Limit to commits by author.
--no-merge	Exclude any commits that mention merge in the revision summary.
#--non-recursive
		Only show changes to PATH itself, omit changes to contained
		files / directories. Supported through "svn lc".
--server	Instead of local history, only list server revisions that you
		don't have yet.
--no-color	Turn off color highlighting.
Usage: "$(basename "$1")" [--no-merge] [-v|--verbose] [--grep REGEXP [--grep ...]] [-i|--regexp-ignore-case] [-E|--extended-regexp|-F|--fixed-strings] [--author REGEXP] [-c M | -r N[:M]] [-g|--use-merge-history] [-l|--limit ARG] [--server|PATH...] [--no-color] [-?|-h|--help]
HELPTEXT
}

mergeFilter()
{
    sed --unbuffered -e '
# Silently capture all header lines until the revision summary in hold space.
/^revision r[0-9]\+$/ {
    h	# This starts the header.
    d
}
/^Author:/ {
    H
    d
}
/^Date:/ {
    N		# Following line is empty.
    H		# Last header line to capture in hold space.
    s/.*//	# Clear without printing.
    N		# Inspect revision summary.
    s/^\n//	# Undo effect of N; n cannot be used because it would print empty line.
    /[Mm]erg\(e\|ed\|es\|ing\)\b/ {
	# Push special MERGE marker into hold space.
	s/.*/MERGE/
	h
	d
    }
    # If the revision summary did not mention a merge, we continue in the script
    # with the header in hold space.
}

x   # Inspect hold space.
/MERGE/ {
    # Currently in merge revision, discard current line.
    x
    d
}

# Not in merge revision; print header from hold space once.
/^$/!p
s/.*//

# And print log line, too.
x
'
}

extractHeaderItem()
{
    sed -ne "s/^${1}: \\+//p"
}
extractRevisionMessage()
{
    sed -e '
/^revision r[0-9]\+$/d
/^Author:/d
/^Date:/d
/^Changed paths:/,/^revision r[0-9]\+$/d
'
}
showNoMatch()
{
    # Going through the revision history (and the processing on Cygwin) takes
    # some time... Print a temporary status to stderr that overwrites itself as
    # the processing progresses.
    # Note: Print trailing space to clear previous status when the number of
    # digits in the revision decreases.
    [ "$isStderrToTerminal" -a "$1" ] && printf >&2 '%s\r' "${1} "
}
clearNoMatch()
{
    # Clear the temporary status to avoid interference with the regular output.
    # This is no problem with "less", because it redraws the entire terminal,
    # but it leaves the remainder of the status, e.g. when piping the log output
    # into "svn revisions", making copy-and-paste cumbersome.
    [ "$isStderrToTerminal" ] && printf >&2 '                    \r'
}
processRevision()
{
    isSkip=

    if [ "$authorArgs" ]; then
	printf '%s\n' "$1" | extractHeaderItem 'Author' | grep -q "$authorArgs" || isSkip='true'
    fi
    if [ ${#grepArgs[@]} -gt 0 ]; then
	# Filter away the revision header and changed file list, and
	# try to match the regexp in the remaining revision message.
	printf '%s\n' "$1" | extractRevisionMessage | grep -q "${grepOptions[@]}" "${grepArgs[@]}" || isSkip='true'
    fi

    if [ "$isSkip" ]; then
	showNoMatch "$revision"
    else
	clearNoMatch
	if [ ${#grepArgs[@]} -gt 0 -a "$grepColorOption" ]; then
	    # Let (another pass of) grep highlight the matches.
	    # We include all lines (but without highlighting) with
	    # the regexp /$/.
	    printf '%s\n' "$1" | grep $grepColorOption "${grepOptions[@]}" "${grepArgs[@]}" -e '$'
	else
	    printf '%s\n' "$1"
	fi
	# Must do fine-grained colorization here so that the results
	# appear immediately, to avoid buffering in the pipe.
    fi
}
grepFilter()
{
    revisionLog=

    revision=
    while IFS=$'\n' read -r line
    do
	case "$line" in
	    revision\ r+([0-9]))
		if [ "$revisionLog" ]; then
		    processRevision "$revisionLog"
		fi

		revision=$line
		# Start a new temporary revision file.
		revisionLog=$line
		;;
	    *)
		revisionLog="$revisionLog
$line"
		;;
	esac
    done

    # Process the very last revision, too.
    if [ "$revisionLog" ]; then
	processRevision "$revisionLog"
    fi
}
limitFilter()
{
    while IFS=$'\n' read -r line
    do
	case "$line" in
	    revision\ r+([0-9]))
		let limit-=1
		if [ $limit -lt 0 ]; then
		    # Close stdin to shut down the feeding svn command. It will
		    # complain with "svn: Write error: Broken pipe".
		    exec 0<&-
		    break
		fi
		;;
	esac

	printf '%s\n' "$line"
    done
}

: ${COLOR_HEADER:='[36m'}
: ${COLOR_FILEADDED:='[32m'}
: ${COLOR_FILECHANGED:='[34m'}
: ${COLOR_FILEREMOVED:='[31m'}
: ${COLOR_RESET:='[0m'}
colorize()
{
    sed --unbuffered --unbuffered -e "
s/^revision r[0-9]\\+$/${COLOR_HEADER}\\0${COLOR_RESET}/
/^Changed paths:/,/^\$/ {
    s/^ \\+A .*\$/${COLOR_FILEADDED}\\0${COLOR_RESET}/
    s/^ \\+M .*\$/${COLOR_FILECHANGED}\\0${COLOR_RESET}/
    s/^ \\+R .*\$/${COLOR_FILEREMOVED}\\0${COLOR_RESET}/
}
"
}

[ -t 2 ] && readonly isStderrToTerminal=t || readonly isStderrToTerminal=
typeset limit=
typeset limitFilter=cat
typeset mergeFilter=cat
typeset grepFilter=cat
typeset colorize=colorize
typeset -a grepArgs=()
typeset grepColorOption=
typeset -a grepOptions=()
typeset isXmlOutput=
case "$GREP_OPTIONS" in
    # The user prefers highlighting of grep matches; enable this in here, too,
    # even though our grep is in a pipe.
    *--color=auto*) grepColorOption='--color=always';;
    *--color=always*) grepColorOption='--color=always';;
esac
typeset authorArgs=
typeset isServerRevisions=
typeset isRevisionGiven=
typeset -a serverArgs=()

typeset -a allargs=()
while [ $# -gt 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--limit|-l)	shift; limit=$1; shift;;
	--no-merge)	shift; mergeFilter='mergeFilter';;
	--no-color)	shift; colorize='cat';;
	--grep)		shift; grepFilter='grepFilter'; grepArgs+=(-e "$1"); shift;;
	--regexp-ignore-case|-i)    shift; grepOptions+=('-i');;
	--extended-regexp|-E)	    shift; grepOptions+=('-E');;
	--fixed-strings|-F)	    shift; grepOptions+=('-F');;
	--author)	shift; grepFilter='grepFilter'; authorArgs=$1; shift;;
	--server)	shift; isServerRevisions='true';;
	--xml)		isXmlOutput=t; allargs+=("$1");  shift;;
	*)
	    if [ "$isServerRevisions" -a -d "$1" ]; then
		serverArgs=("$1")
	    else
		allargs+=("$1")
	    fi

	    case "$1" in
		--change|-c)	isRevisionGiven=t;;
		--revision|-r)	isRevisionGiven=t;;
	    esac

	    shift
	    ;;
    esac
done
if [ "$isServerRevisions" ]; then
    if [ "$isRevisionGiven" ]; then
	# The revision(s) have been passed; no need to check what's on the
	# server. Just add the repository URL.
	# Note: Passing --server when revisions are passed is superfluous;
	# Subversion will query the server, anyway. But better support this in a
	# consistent way. Without this, we would either get an unexpected list
	# of all server revisions, or a Subversion error about -r and -c being
	# mutually exclusive.
	allargs+=("${serverArgs[@]}" $(svn-url "${serverArgs[@]}"))
    else
	# Determine the range of revisions available on the server.
	allargs+=($(svn-serverrevs "${serverArgs[@]}"))
    fi
fi
if [ "$limit" ]; then
    if [ "$mergeFilter" = 'cat' -a "$grepFilter" = 'cat' ]; then
	# When we do not need to do revision filtering, we can let svn log handle
	# the limit itself.
	allargs+=(--limit $limit)
    else
	limitFilter="limitFilter"
    fi
fi

set -o pipefail
if [ "$isXmlOutput" ]; then
    # Shortcut for XML output: We don't need (and support) the full processing
    # then.
    [ "$mergeFilter" = 'cat' -a "$grepFilter" = 'cat' ] || echo >&2 "Warning: filtering is not supported with XML output."

    svn log --non-interactive "${allargs[@]}" | less --RAW-CONTROL-CHARS
    exit $?
fi
svn log --non-interactive "${allargs[@]}" 2> >(grep -Fv 'Write error: Broken pipe') | sed --unbuffered -e '
/^r[0-9]\+/{
    # Expand revision info into multi-line header.
    s/\(^r[0-9]\+\) *| *\([^|]\+\) *| *\([^|]\+\) *|.*/revision \1\nAuthor: \2\nDate:   \3 /
    2!s/^/\n/
    b
}
# Silently capture the changed file list in hold space.
/^Changed paths:/,/^$/ {
    /^Changed paths:/{
	# Because this range consumes the empty line between the changed file
	# list and the revision summary, it must be printed explicitly to
	# maintain the spacing towards the header.
	a\

	s/^/\n/	# Also start the stored block with a newline.
	# This starts the changed file list.
	h
	d
    }
    H
    d
}

# At the end of the revision log, print the changed file list (in case of "svn
# log -v").
/^-\+$/{ g; /^$/d; s/\n$//; b }

# Indent revision message.
s/^/    /

# Note: With --incremental (used by "svn-lc"), there is no trailing separator
# line.
${ G; s/\n$//; b }
' | $mergeFilter | $grepFilter | $limitFilter | $colorize | less --RAW-CONTROL-CHARS
