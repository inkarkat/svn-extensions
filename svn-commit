#!/bin/bash

set -o pipefail
# Enable extended file pattern matching operators from ksh
# (?(pattern-list), !(pattern-list), ...) in Bash.
shopt -qs extglob

revision=
committedFile=
svnCommit()
{
    getCommittedFile "$@"
    if [ ! "$committedFile" ]; then
	echo >&2 "ERROR: Could not find a file to commit; this is the status of the working copy:"
	svn status --non-interactive "${commonArguments[@]}"
	exit 1
    fi

echo "**** a committed file: $committedFile"
    svn commit "$@" || exit $?
    getCommitRevision "$@"
echo "**** committed revision: $revision"

    if [ "$revision" ] && type -t svn-post-commit >/dev/null; then
	svn-post-commit "$revision" "$committedFile" "$@"
    fi
}

getCommittedFile()
{
    # We cannot capture the output from svn commit; it may launch the
    # interactive editor for the commit message, so we cannot invoke it inside a
    # pipeline. Instead, grab the committed revision from one of the files.

    # Filter out arguments specific to svn commit, so that the rest can be
    # passed to svn status; we need to observe stuff like --changelist.
    typeset -a commonArguments=()
    local isSkipNext=
    for arg
    do
	if [ "$isSkipNext" ]; then
	    isSkipNext=
	    continue
	fi

	case "$arg" in
	    --targets|-m|--message|-F|--file|--editor-cmd|--encoding|--with-revprop) isSkipNext=t;;
	    --no-unlock|--force-log|--keep-changelists) ;;
	    *)	commonArguments+=("$arg");;
	esac
    done

    lastArg=
    [ ${#commonArguments[@]} -gt 0 ] && lastArg=${commonArguments[${#commonArguments[@]} - 1]}
    if [ -e "$lastArg" -a ! -d "$lastArg" ]; then
	# Shortcut: The last argument is an actual file (not just a base
	# directory to search for modified files); use that.
	committedFile=$lastArg
    else
	# Get one commited file from the commit via svn status.
	committedFile=$(svn status --non-interactive "${commonArguments[@]}"  2> >(grep -Fv 'Write error: Broken pipe') | sed -ne '/^[AMR].\{7\}\|^.M.\{6\}/{ s/^.\{8\}//p; q}') # Don't check for exit status because sed's "q" command causes an "svn: Write error: Broken pipe".
	if [ ! "$committedFile" ]; then
	    # We'd prefer to find an existing file, but if the commit contains
	    # only deletions, take one of the changed directories that contains
	    # a deleted file (as we need a still-existing file to retrieve the
	    # revision).
	    local deletedFile=$(svn status --non-interactive "${commonArguments[@]}"  2> >(grep -Fv 'Write error: Broken pipe') | sed -ne '/^D.\{7\}/{ s/^.\{8\}//p; q}') # Don't check for exit status because sed's "q" command causes an "svn: Write error: Broken pipe".
	    [ "$deletedFile" ] && committedFile=$(dirname -- "$deletedFile") || committedFile=
	fi
    fi
}

getCommitRevision()
{
    revision=$(svn info --non-interactive "${committedFile:?}" | sed -ne 's/^Revision: //p') || return
}



commitMessage=svn-commit.tmp
readonly boilerplateStartLinePattern='^--This line, and those below, will be ignored--$'

if [ ! -r "$commitMessage" -a $# -eq 0 ]; then
    svnCommit "$@"
    exit $?
fi

# Are individual files committed?
typeset -a files=()
for arg
do
    [ -r "$arg" ] && files+=("$arg")
done
# Check the current directory's saved commit message, too. We may have realized
# during the commit that we only want to commit a partial set of files, abort,
# and then relaunch the commit with file arguments.
if [ ! -r "$commitMessage" -a ${#files} -gt 0 ]; then
    # When individual files are committed, Subversion places the commit message
    # into the common directory root. We need to find that one, too.
    readonly commonDir=$(commonpath "${files[@]}")
    commitMessage="${commonDir}/$commitMessage"
fi
if [ ! -r "$commitMessage" ]; then
    svnCommit "$@"
    exit $?
fi


removeCommitMessage()
{
    rm -- "$commitMessage"
}

if [ $(sed -n -e "/${boilerplateStartLinePattern}/q" -e '/^[ \t]*$/!p' "$commitMessage" | wc -l) -eq 0 ]; then
    removeCommitMessage && echo >&2 'Removed empty saved commit message.'
    svnCommit "$@"
    exit $?
fi

echo "Found a saved commit message ${commitMessage}:"
sed -e "/${boilerplateStartLinePattern}/{g;q}" "$commitMessage"

printf %s "Do you want to (e)dit, (u)se directly, (d)iscard this saved commit message, or (c)ancel? (e/u/d/c) "
read answer
case $answer in
    [eu])   ;;
    d)	    removeCommitMessage; svnCommit "$@"; exit $?;;
    c)	    exit 1;;
    *)	    exit 1;;
esac

# Note: Use a similar syntax for the temp file name to aid file type detection
# by the editor.
TMPFILE=$(mktemp --tmpdir "svn-commit-XXXXXX.tmp" 2>/dev/null || echo "${TEMP:-/tmp}/svn-commit-$$.tmp")
cleanup()
{
    # Something went wrong when TMPFILE still exists; move it back to the saved
    # commit message so that the process can be repeated.
    [ -r "$TMPFILE" ] && mv -- "$TMPFILE" "$commitMessage" 2>/dev/null
}
[ "$DEBUG" ] || trap 'cleanup' EXIT
mv -- "$commitMessage" "$TMPFILE" || exit $?

if [ "$answer" = 'e' ]; then
    if ! "$EDITOR" "$TMPFILE"; then
	echo 2>&1 "Unclean exit of editor; aborting, with the message back in ${commitMessage}!"
	status=$?
	cleanup
	exit $status
    fi
fi

# Remove the boilerplate ...
sed -i -e "/${boilerplateStartLinePattern}/{g;q}" "$TMPFILE"
# ... and any trailing blank lines at the end of the message.
sed -i -e :a -e '/^\n*$/{$d;N;ba' -e '}' "$TMPFILE"

if svnCommit --file "$TMPFILE" "$@"; then
    # Remove the temporary message file after a successful commit to avoid that
    # the cleanup reinstates it as the original saved commit message.
    rm -- "$TMPFILE" 2>/dev/null
    exit 0
fi
