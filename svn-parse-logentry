#!/usr/bin/awk -f

BEGIN {
    FS = " \\| "
    fileCnt = 0
    descriptionCnt = 0
    isCaptureMessage = 0
    isCaptureSummary = 1
}

function quote(string)
{
    gsub(/'/, "'\\''", string)
    return "'" string "'"
}
function join(array, start, end,      result, i)
{
    if (length(array) == 0)
	return ""
    result = quote(array[start])
    for (i = start + 1; i <= end; i++)
	result = result " " quote(array[i])
    return result
}


# Capture the metadata.
/^r[0-9]+/ && scalar["revision"] == "" { # Only take the first seen revision; this avoids that another occurrence of a revision in the description mistakenly restarts the parsing.
    scalar["revision"] = $1
    scalar["author"] = $2
    scalar["timestampFull"] = $3
    scalar["timestamp"] = gensub(/ \([^()]+\)$/, "", "", $3)
    scalar["date"] = gensub(/ .*$/, "", "", $3)
    scalar["time"] = gensub(/^[^ ]+ ([^ ]+) .*$/, "\\1", "", $3)
    next
}

# Capture the changed file list.
/^Changed paths:/,/^$/ {
    if ($0 == "Changed paths:") next
    if ($0 == "") {
	isCaptureMessage = 1
	next
    }

    list["changes"][fileCnt] = $0
    list["paths"][fileCnt] = substr($0, 6)
    fileCnt += 1
    next
}
/^$/ {
    if (! isCaptureMessage) {
	isCaptureMessage = 1
	next
    } else if (isCaptureSummary) {
	isCaptureSummary = 0
	next
    }
}
/^-+$/ {
    if (isCaptureMessage) {
	# The summary ends before the end boilerplate (in case no description
	# follows).
	isCaptureSummary = 0
    }
}

# Capture the summary and description of the commit message.
{
    if (isCaptureMessage) {
	if (isCaptureSummary) {
	    if (scalar["summary"] == "")
		scalar["summary"] = $0
	    else
		scalar["summary"] = scalar["summary"] " " $0
	} else {
	    list["description"][descriptionCnt] = $0
	    descriptionCnt += 1
	}
    }
}

END {
    for (s in scalar) {
	print s "=" quote(scalar[s])
    }

    # Prune the end boilerplace from the captured description.
    # We do this after the parsing (instead of stopping the parsing at a
    # boilerplate line) to capture potential lines contained inside the
    # description; only the last line at the end is the boilerplate one.
    if (descriptionCnt > 0) {
	if (list["description"][descriptionCnt - 1] ~ /^-+$/) {
	    delete list["description"][descriptionCnt - 1]
	    descriptionCnt -= 1

	    if (list["description"][descriptionCnt - 1] == "") {
		delete list["description"][descriptionCnt - 1]
		descriptionCnt -= 1
	    }
	}
    }

    for (l in list) {
	len = length(list[l])
	print "typeset -a " l "=(" join(list[l], 0, len - 1) ")"
    }
}
