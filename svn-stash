#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Save the full dirty working copy in a temporary patch (named NAME) and revert
it. Instead of creating a stash, you can also pass one of the following
subcommands:
list:   Show all stashed commits.
show:	Show the changes recorded in the stash as a diff.
apply:  Apply the topmost stashed commit onto the working copy.
pop:    Apply and the topmost stashed commit onto the working copy and remove it from the stash.
drop:   Remove a single stash.
clear:  Throw away all stashes.
create:	Just create a patch, but do not revert the working copy.
Usage: "$(basename "$1")" [list|show [--no-color]|apply|pop|drop|clear|create] [-n|--name NAME [-f|--force]] [-b] [-w] [-c M | -r N[:M]] [TARGET[@REV]...] [-?|-h|--help]
HELPTEXT
}

getLastPatch()
{
    case "$1" in
	--name|-n)	shift
			if [ ! "$1" ]; then
			    echo >&2 "ERROR: Must pass patch file name"
			    exit 2
			elif [ -r "${stashDir}/${1}.patch" ]; then
			    printf '%s/%s.patch' "$stashDir" "$1"; shift
			elif [ -r "${stashDir}/${1}" ]; then
			    printf '%s/%s' "$stashDir" "$1"; shift
			else
			    echo >&2 "ERROR: patch does not exist: ${stashDir}/$1"
			    exit 2
			fi
			;;
	'')		printf '%s/' "$stashDir"
			ls -1t "${stashDir}" | head -n 1
			;;
	*)		exit 2;;
    esac
}

apply()
{
    [ -e "$1" ] && svn-applyr "$1"
    status=$?
    svn status
    return $status
}

# Highlight diff output if available.
hasColorDiff=
type -t colordiff >/dev/null && hasColorDiff=t
checkNoColorArg()
{
    case "$1" in
	--no-color)
	    shift
	    hasColorDiff=
	    return 0
	    ;;
    esac
    return 1
}

rootdir=$(svn-root) || exit $?
cd "$rootdir" || exit $?
readonly stashDir='.svn/stashes'

typeset isRevert=t
case $1 in
    list)   cd "$stashDir" || exit $?
	    IFS=$'\n'
	    for file in $(ls -1rt)
	    do
		printf '%s\n' "$file"
		diffstat -C "$file"
	    done
	    exit $?
	    ;;
    show)   shift
	    checkNoColorArg "$1" && shift
	    checkNoColorArg "$3"    # Arguments 1 and 2 are -n NAME then.
	    lastPatchFile=$(getLastPatch "$@") || exit $?
	    if [ "$hasColorDiff" ]; then
		cat "$lastPatchFile" | colordiff | "${PAGER:-less}" --RAW-CONTROL-CHARS
	    else
		cat "$lastPatchFile" | "${PAGER:-less}" --RAW-CONTROL-CHARS
	    fi
	    exit $?
	    ;;
    apply)  shift
	    lastPatchFile=$(getLastPatch "$@") || exit $?
	    apply "$lastPatchFile"
	    exit $?
	    ;;
    pop)    shift
	    lastPatchFile=$(getLastPatch "$@") || exit $?
	    apply "$lastPatchFile" && rm "$lastPatchFile"
	    exit $?
	    ;;
    drop)   shift
	    lastPatchFile=$(getLastPatch "$@") || exit $?
	    [ -e "$lastPatchFile" ] && rm -i "$lastPatchFile"
	    exit $?
	    ;;
    clear)  rm -ir "${stashDir}/"*
	    exit $?
	    ;;
esac

isForce=
typeset -a allargs=()
typeset name="stash-$(date +%Y%m%d-%H%M%S)"
[ "$1" = 'create' ] && { shift; isRevert=; }
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--name|-n)	shift; name="$1"; shift;;
	--force|-f)	shift; isForce=t;;
	*)		allargs+=("$1")
			shift
			;;
    esac
done

[ -d "$stashDir" ] || mkdir -p "$stashDir" || { echo >&2 'Failed to create stashes directory.'; exit $?; }
[ -w "$stashDir" ] || { echo >&2 "Cannot write to stashes directory: ${PWD%/}/$stashDir"; exit 1; }

readonly stashFilespec="${stashDir}/${name}.patch"
if [ -e "$stashFilespec" -a ! "$isForce" ]; then
    read -p "${name}.patch already exists; overwrite? (y/n) " choice
    [ "$choice" = 'y' ] || exit 1
fi

svn-diff --no-color --patch-compatible "${allargs[@]}" > "$stashFilespec" || exit $?
diffstat -C "$stashFilespec"
if [ "$isRevert" ]; then
    if [ ${#allargs[@]} -eq 0 ]; then
	svn revert --recursive .
    else
	svn revert --recursive "${allargs[@]}"
    fi
fi
