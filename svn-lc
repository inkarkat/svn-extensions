#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show logs together with diff between commits.
Note: If you supply -c|--change REV, you can just as well use "svn show REV".
--grep regexp   Limit the commits to ones with log message that matches the
		specified pattern.
--author regexp	Limit to commits by author.
#--no-merge	Exclude any commits that mention merge in the revision summary.
--server	Instead of local history, only list server revisions that you
		don't have yet.
--no-color	Turn off color highlighting.
Usage: "$(basename "$1")" [-r|--revision ARG] [-l|--limit ARG] [--server|PATH] [-?|-h|--help]
HELPTEXT
}

getRevisions()
{
    typeset xmlFilter=
    if [ "$authorArgs" ]; then
	xmlFilter="${xmlFilter}${xmlFilter:+ }-i 'contains(author,\"${authorArgs}\")'"
    fi
    if [ "$grepArgs" ]; then
	# XXX: Need matches() XSLT 2 function for regexp-based pattern matching.
	# Unfortunately, this isn't yet supported by xmlstarlet / libxslt.
	#xmlFilter="${xmlFilter}${xmlFilter:+ }-i 'matches(msg,\"${grepArgs}\")'"
	xmlFilter="${xmlFilter}${xmlFilter:+ }-i 'contains(msg,\"${grepArgs}\")'"
    fi
    #if [ "$isMergeFilter" ]; then
    #	xmlFilter="${xmlFilter}${xmlFilter:+ }-i 'matches(msg,\"[Mm]erg\\(e\\|ed\\|es\\|ing\\)\\b\")'"
    #fi

    if [ "$xmlFilter" ]; then
	(eval "svn log --non-interactive --xml $revisionRangeArgs" '"${allargs[@]}"' || echo '<log></log>') | eval "xmlstarlet sel --text -t -m '//logentry' $xmlFilter -v '@revision' -n"
    else
	(eval "svn log --non-interactive --xml --with-no-revprops $revisionRangeArgs" '"${allargs[@]}"' || echo '<log></log>') | xmlstarlet sel --text -t -m '//logentry' -v '@revision' -n
    fi
}

isMergeFilter=
authorArgs=
grepArgs=
revisionRangeArgs=
serverRevisionsArgs=
typeset -a allargs=()
typeset -a colorargs=()
while [ $# -gt 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	-c|--change)	revisionRangeArgs="${revisionRangeArgs}${revisionRangeArgs:+ }$1 '$2'"; shift; shift;;
	-r|--revision)	revisionRangeArgs="${revisionRangeArgs}${revisionRangeArgs:+ }$1 '$2'"; shift; shift;;
	-l|--limit)	revisionRangeArgs="${revisionRangeArgs}${revisionRangeArgs:+ }$1 '$2'"; shift; shift;;
	#--no-merge)	shift; isMergeFilter=true;;
	--grep)		shift; grepArgs=$1; shift;;
	--author)	shift; authorArgs=$1; shift;;
	--server)	shift
			serverRevisionsArgs=$(svn-serverrevs)
			# Only add the revision filter for getRevisions() here,
			# the server repo URL must be passed to all svn
			# commands.
			revisionRangeArgs="${revisionRangeArgs}${revisionRangeArgs:+ }${serverRevisionsArgs% *}"
			;;
	--no-color)
			colorargs+=("$1")	# Do not pass this option to the default svn log; it doesn't understand it.
			shift
			;;
	*)
	    allargs+=("$1")
	    shift
	    ;;
    esac
done
if [ "$serverRevisionsArgs" ]; then
    # Only append the server repo URL here; the revision selection is done by the loop.
    allargs+=("${serverRevisionsArgs##* }")
fi

set -o pipefail
getRevisions | while read revision
do
    svn-wrapper log --incremental --change "$revision" "${colorargs[@]}" "${allargs[@]}" && svn-dp --change "$revision" "${colorargs[@]}" "${allargs[@]}"
done | less --RAW-CONTROL-CHARS
