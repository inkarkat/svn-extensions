#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show logs together with diff between commits.
Note: If you supply -c|--change REV, you can just as well use "svn show REV".
-v		Include a list of changed files.
-R, --reverse	Show in reverse order.
--grep REGEXP   Limit the commits to ones with log message that matches the
		specified pattern.
-i, --regexp-ignore-case
		Match the regexp limiting patterns without regard to letters case.
--author REGEXP	Limit to commits by author.
--prop only	Limit to commits that change properties.
--prop skip	Skip commits that only change properties.
--prop-scope minimal|file|diff
		Override which part of the diff gets output when limiting to
		property changes.
--prop-filter REGEXP
		Limit to changes to properties matching REGEXP (e.g.
		svn:mergeinfo); all other property names are ignored.
#--no-merge	Exclude any commits that mention merge in the revision summary.
		and non-recursive changes.
--non-recursive	Only show changes to PATH itself, omit changes to contained
		files / directories. Useful when you only want to see file
		additions / removals or only property changes on the directory
		itself.
--server	Instead of local history, only list server revisions that you
		don't have yet.
--no-color	Turn off color highlighting.
--no-diff	Do not actually show the diff, just the log. In contrast to svn
		log, you can use the superior filters for property changes.
--no-log	Do not actually show the log, just the diff. In contrast to svn
		dp, you do not need to pass all revisions separately.
Usage: "$(basename "$1")" [--grep REGEXP [--grep ...]] [-i|--regexp-ignore-case] [--author REGEXP] [--prop only|skip [--prop-scope minimal|file|diff]] [-r|--revision ARG|-R|--reverse] [-l|--limit ARG] [--non-recursive] [--server|PATH] [--no-color] [--no-diff|--no-log] [-?|-h|--help]
HELPTEXT
}

getRevisions()
{
    typeset -a svnAdditionalArgs=()
    typeset xmlFilter=
    if [ "$authorArgs" ]; then
	xmlFilter="${xmlFilter}${xmlFilter:+ }-i 'contains(author,\"${authorArgs}\")'"
    fi
    if [ ${#grepArgs[@]} -gt 0 ]; then
	local condition=
	local grepArg
	for grepArg in "${grepArgs[@]}"
	do
	    # XXX: Need matches() XSLT 2 function for regexp-based pattern matching.
	    # Unfortunately, this isn't yet supported by xmlstarlet / libxslt.
	    #condition="${condition}${condition:+ or }matches(msg,\"${grepArg}\")"
	    # XXX: Need XSLT 2 "i" flag to matches() or lower-case() function
	    # for case-insensitive comparison. Work around (for ASCII
	    # characters) with translate().
	    if [ "$grepCaseInsensitive" ]; then
		condition="${condition}${condition:+ or }contains(translate(msg, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"abcdefghijklmnopqrstuvwxyz\"),\"${grepArg}\")"
	    else
		condition="${condition}${condition:+ or }contains(msg,\"${grepArg}\")"
	    fi
	done
	xmlFilter="${xmlFilter}${xmlFilter:+ }-i '$condition'"
    fi
    #if [ "$isMergeFilter" ]; then
    #	xmlFilter="${xmlFilter}${xmlFilter:+ }-i 'matches(msg,\"[Mm]erg\\(e\\|ed\\|es\\|ing\\)\\b\")'"
    #fi
    if [ "$nonRecursivePaths" ]; then
	# We need the file path information from the verbose log.
	svnAdditionalArgs+=('--verbose')

	isFirst=t
	for path in "${nonRecursivePaths[@]}"
	do
	    if [ "$isFirst" ]; then
		isFirst=
		xmlFilter="${xmlFilter}${xmlFilter:+ }-i './/path = \"${path}\""
	    else
		xmlFilter="${xmlFilter} or .//path = \"${path}\""
	    fi
	done
	xmlFilter="${xmlFilter}'"
    fi
####D echo >&2 "**** $xmlFilter"
    [ "$xmlFilter" ] && typeset -a svnLogArgs=() || typeset -a svnLogArgs=('--with-no-revprops')
    (svn log --non-interactive --xml "${svnLogArgs[@]}" "${svnAdditionalArgs[@]}" "${revisionRangeArgs[@]}" "${allargs[@]}" || echo '</log>') | eval "xmlstarlet sel --text -t -m '//logentry' $xmlFilter -v '@revision' -n"
}

showNoMatch()
{
    # Going through the individual diffs takes some time... Print a temporary
    # status to stderr that overwrites itself as the processing progresses.
    # Note: Print trailing space to clear previous status when the number of
    # digits in the revision decreases.
    [ "$isStderrToTerminal" -a "$1" ] && printf >&2 '%s\r' "${1} "
}

filterRecursivePaths()
{
    svn-filefilter --non-recursive "$(svn-pathname "${paths[@]}")"
}

svnLog()
{
    [ $revisionCnt -gt 0 ] && echo # Padding between two revisions.

    # The --incremental avoids the prepended separator on the first log entry.
    svn-wrapper log --incremental --change "$revision" "${colorargs[@]}" "${verboseArgs[@]}" "${allargs[@]}"
}

: ${COLOR_HEADER:='[36m'}
: ${COLOR_RESET:='[0m'}

[ -t 2 ] && readonly isStderrToTerminal=t || readonly isStderrToTerminal=
limit=
isReverse=
isMergeFilter=
authorArgs=
typeset -a grepArgs=()
grepCaseInsensitive=
propFilterMethod=
propFilterPropertyNamePattern=
typeset -a revisionRangeArgs=()
serverRevisionsArgs=
nonRecursivePaths=
nonRecursivePathsFilter=cat
isDiff=t
isLog=t
typeset -a allargs=()
typeset -a verboseArgs=()
typeset -a colorargs=()
typeset isServerRevisions=
typeset -a serverArgs=
while [ $# -gt 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--verbose|-v)	verboseArgs+=("$1"); shift;; # Do not pass this option to svn diff; it doesn't understand it.
	-c|--change)	revisionRangeArgs+=("$1" "$2"); shift; shift;;
	-r|--revision)	revisionRangeArgs+=("$1" "$2"); shift; shift;;
	-R|--reverse)	shift; isReverse=t;;
	-l|--limit)	shift; limit=$1; shift;;
	#--no-merge)	shift; isMergeFilter=true;;
	--grep)		shift; grepArgs+=("$1"); shift;;
	--regexp-ignore-case|-i)    shift; grepCaseInsensitive=t;;
	--author)	shift; authorArgs=$1; shift;;
	--prop)		shift; propFilterMethod="$1"; shift;;
	--prop-scope)	shift; propScope="$1"; shift;;
	--prop-filter)	shift; propFilterPropertyNamePattern="$1"; shift;;
	--non-recursive)    shift; nonRecursivePaths=t;;
	--server)	shift; isServerRevisions='true';;
	--no-color)	colorargs+=("$1")   # Do not pass this option to the default svn log; it doesn't understand it.
			shift
			# And clear all colors used here.
			for color in ${!COLOR_@}; do
			    unset $color
			done
			;;
	--no-diff)	shift; isDiff=;;
	--no-log)	shift; isLog=;;
	*)
	    if [ "$isServerRevisions" -a -d "$1" ]; then
		serverArgs=("$1")
	    else
		allargs+=("$1")
	    fi
	    shift
	    ;;
    esac
done
if [ "$isServerRevisions" ]; then
    serverRevisionsArgs=$(svn-serverrevs "${serverArgs[@]}")
    # Only add the revision filter for getRevisions() here, the server repo URL
    # must be passed to all svn commands.
    revisionRangeArgs+=(${serverRevisionsArgs% *})
fi
if [ "$isReverse" ]; then
    if [ ${#revisionRangeArgs[@]} -eq 0 ]; then
	revisionRangeArgs=('-r' '1:BASE')
    else
	typeset -a tmpArgs=()
	for (( idx=${#revisionRangeArgs[@]}-2 ; idx>=0 ; idx-=2 ))
	do
	    IFS=: read -a ranges <<< "${revisionRangeArgs[idx+1]}"
	    if [ ${#ranges[@]} -eq 2 ]; then
		rangeArg="${ranges[1]}:${ranges[0]}"
	    else
		rangeArg="${revisionRangeArgs[idx+1]}"
	    fi
	    tmpArgs+=("${revisionRangeArgs[idx]}" "$rangeArg")
	done
	typeset -a revisionRangeArgs=("${tmpArgs[@]}")
    fi
fi

if [ ! "$isDiff" -a ! "$isLog" ]; then
    echo >&2 "Nothing to show."
    exit
fi
if [ "$nonRecursivePaths" ]; then
    # Resolve the remaining arguments to repository paths.
    typeset -a paths=()
    for arg in "${allargs[@]}"
    do
	[ -e "$arg" ] && paths+=("$arg")
    done

    # Note: "svn log" only supports a single working copy PATH; let's hope we've
    # found at least one. If there are many, Subversion will complain ("svn:
    # When specifying working copy paths, only one target may be given"), so we
    # can be sloppy with capturing into a scalar variable here.
    nonRecursivePaths=$(svn-pathname --server "${paths[@]}") || exit $?

    [ "$nonRecursivePaths" ] && nonRecursivePathsFilter=filterRecursivePaths
fi
if [ "$serverRevisionsArgs" ]; then
    # Only append the server repo URL here; the revision selection is done by the loop.
    allargs+=("${serverRevisionsArgs##* }")
fi
if [ "$limit" ]; then
    if [ ! "$authorArgs" -a ${#grepArgs[@]} -eq 0 -a ! "$propFilterMethod" ]; then
	# When we do not need to do revision filtering, we can let svn log handle
	# the limit itself.
	revisionRangeArgs+=('--limit' "$limit")
	limit=
    fi
fi

set -o pipefail
if [ ! "$isDiff" -a ! "$propFilterMethod" ]; then
    # Optimization: It is noticeably faster (probably due to the network
    # handshaking with the Subversion server) to launch "svn log" with all
    # revisions instead of doing this separately for each revision.
    [ "$limit" ] && limitArg="${limit}q" || limitArg=
    getRevisions | sed -e 's/^/-c /' ${limitArg:+-e} ${limitArg} | xargs --no-run-if-empty svn-wrapper log --incremental "${colorargs[@]}" "${verboseArgs[@]}" "${allargs[@]}" | $nonRecursivePathsFilter | less --RAW-CONTROL-CHARS
    exit $?
fi

let revisionCnt=0
getRevisions | { while read revision
do
    if [ "$propFilterMethod" ]; then
	case "$propFilterMethod" in
	    only)   filterArg=--show;
		    if [ "$nonRecursivePaths" ]; then
			filterScope=${propScope:-file}    # File scope when non-recursive.
		    else
			filterScope=${propScope:-diff}    # Else get the whole diff when there's a property change.
		    fi
		    ;;
	    skip)   filterArg=--hide; filterScope=${propScope:-minimal};; # When there are only property changes, nothing will be returned.
	    *)	    echo >&2 "ERROR: Invalid parameter for --props: $propFilterMethod"; printUsage "$0"; exit 2;;
	esac
	[ "$propFilterPropertyNamePattern" ] && typeset -a propFilterArg=('--filter' "$propFilterPropertyNamePattern") || typeset -a propFilterArg=()

	diffContents=$(svn-dp --no-color --change "$revision" "${allargs[@]}" | svn-propfilter --no-color $filterArg --scope $filterScope "${propFilterArg[@]}")

	if [ "$diffContents" ]; then
	    # Alright, we have a diff to show, now get the log entry first.
	    if [ "$isLog" ]; then
		svnLog
	    else
		[ $revisionCnt -eq 0 ] || echo
		echo "${COLOR_HEADER}revision r${revision}${COLOR_RESET}"
	    # Then show the diff contents.
	    fi && if [ "$isDiff" ]; then
		if [ "$isLog" ]; then
		    echo
		fi
		isColorDiff=
		[ ${#colorargs[@]} -eq 0 ] && type -t colordiff >/dev/null && isColorDiff=t
		printf '%s\n' "$diffContents" | if [ "$isColorDiff" ]; then colordiff; else cat; fi
	    fi

	    let revisionCnt+=1
	else
	    showNoMatch "r${revision#r}"
	fi
    else
	if [ "$isLog" ]; then
	    svnLog
	else
	    [ $revisionCnt -eq 0 ] || echo
	    echo "${COLOR_HEADER}revision r${revision}${COLOR_RESET}"
	fi && if [ "$isDiff" ]; then
	    if [ "$isLog" ]; then
		echo
	    fi
	    svn-dp --change "$revision" "${colorargs[@]}" "${allargs[@]}"
	fi

	let revisionCnt+=1
    fi

    [ "$limit" ] && [ $revisionCnt -ge $limit ] && break
done; [ "$revisionCnt" -gt 0 ]; } | $nonRecursivePathsFilter | less --RAW-CONTROL-CHARS
